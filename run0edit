#!/bin/sh
# ------------------------------------------------------------------------------
# run0edit - edit a single file as root.
#
# Please report issues at: https://github.com/HastD/run0edit/issues
#
# Copyright (C) 2025 Daniel Hast
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

readonly version=0.4.1

# Set pipefail if it's supported by the shell, disregard if unsupported.
# shellcheck disable=SC3040
( set -o pipefail 2> /dev/null ) && set -o pipefail
set -eu

# Reset $PATH to a default value to ensure command invocations point to
# standard utilities.
# shellcheck disable=SC2016
PATH=$(command -p env -i sh -c 'echo "$PATH"')

print_usage() {
    cat <<-'EOF'
run0edit allows a permitted user to edit a file as root.

Usage: run0edit [--] FILE
Usage: run0edit --help | -h | --version | -v

To use another text editor, write the path to your text editor of choice to
    /etc/run0edit/editor.conf
EOF
}

filename=""

while [ "$#" -gt 0 ]; do
    case "$1" in
        -v|--version)
            echo "run0edit $version"
            exit
            ;;
        -h|--help)
            print_usage
            exit
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "run0edit: unknown option $1"
            exit 1
            ;;
        *)
            if [ -n "$filename" ]; then
                echo 'Error: too many positional arguments.' >&2
                exit 1
            fi
            filename="$1"
            shift
            ;;
    esac
done

# Handle positional arguments after --
while [ "$#" -gt 0 ]; do
    if [ -n "$filename" ]; then
        echo 'run0edit: too many positional arguments.' >&2
        echo 'Run with --help for usage info.' >&2
        exit 1
    fi
    filename="$1"
    shift
done

if [ -z "$filename" ]; then
    echo 'run0edit: missing argument' >&2
    exit 1
elif [ -w "$filename" ]; then
    echo 'File is writable by the current user; run0edit is unnecessary.' >&2
    exit 1
fi

# Determine text editor to use.
editor=''
readonly etc_conf_path='/etc/run0edit/editor.conf'
readonly usr_conf_path='/usr/etc/run0edit/editor.conf'
if [ -f "$etc_conf_path" ] && [ -r "$etc_conf_path" ]; then
    editor="$(cat "$etc_conf_path")"
elif [ -f "$usr_conf_path" ] && [ -r "$usr_conf_path" ]; then
    editor="$(cat "$usr_conf_path")"
fi
if [ -f "$editor" ] && [ -x "$editor" ]; then
    :
elif command -pv nano > /dev/null; then
    editor="$(command -pv nano)"
elif command -pv vi > /dev/null; then
    editor="$(command -pv vi)"
else
    echo 'Editor not found. Please install either nano or vi, or write the path to' >&2
    echo 'the text editor of your choice to /etc/run0edit/editor.conf' >&2
    exit 1
fi

readonly_filesystem() {
    if [ -r "$1" ] && command -pv findmnt >/dev/null; then
        command -p findmnt -nru -o OPTIONS --target "$1" | tr ',' '\n' | grep -q '^ro$'
    else
        false
    fi
}

# Create a temporary file with a random suffix appended to the filename.
directory=$(dirname -- "$filename")
if readonly_filesystem "$filename" || readonly_filesystem "$directory"; then
    echo "run0edit: $filename is on a read-only filesystem." >&2
    exit 1
fi
trunc_filename=$(basename -- "$filename" | head -c 64)
temp_filename=$(mktemp --tmpdir -- "${trunc_filename}.XXXXXXXXXX")

# Inner script to be run with elevated privileges:
# shellcheck disable=SC2016
script='\
    ( set -o pipefail 2> /dev/null ) && set -o pipefail
    set -eu
    PATH=$(command -p env -i sh -c "echo \"\$PATH\"")
    filename="$1"
    tmpfile="$2"
    editor="$3"
    edit_immutable="no"

    readonly_filesystem() {
        if command -v findmnt >/dev/null; then
            findmnt -nru -o OPTIONS --target "$1" | tr "," "\n" | grep -q "^ro\$"
        else
            false
        fi
    }

    ask_immutable() {
        if command -v lsattr >/dev/null; then
            immutable_flag=$(lsattr -d -- "$1" 2>/dev/null | cut -d " " -f1 | tr -d "-" || echo "")
        else
            immutable_flag=""
        fi
        if [ "$immutable_flag" = i ]; then
            echo "WARNING: $1 has the immutable flag."
            if [ -d "$1" ]; then
                printf "Temporarily remove the flag to create a file in the directory? [y/N] "
            else
                printf "Temporarily remove the flag to edit the file? [y/N] "
            fi
            ask_immutable_response=""
            read -r ask_immutable_response
            case "$ask_immutable_response" in
                y*|Y*) true ;;
                *) false ;;
            esac
        else
            false
        fi
    }

    # If the file does not exist, ensure the directory exists and is writable.
    if [ ! -e "$filename" ]; then
        directory="$(dirname -- "$filename")"
        if [ ! -d "$directory" ]; then
            echo "run0edit: invalid argument: directory does not exist"
            exit 1
        elif [ ! -w "$directory" ]; then
            if readonly_filesystem "$directory"; then
                echo "run0edit: $directory is on a read-only filesystem."
                exit 1
            fi
            if ask_immutable "$directory"; then
                edit_immutable="yes"
            fi
            if [ "$edit_immutable" = "no" ]; then
                echo "run0edit: $directory is read-only."
                exit 1
            fi
        fi
    fi

    # If the file exists, ensure it is a regular file and writable, then
    # attempt to copy it to the temp file.
    if [ -e "$filename" ]; then
        if [ ! -f "$filename" ]; then
            echo "run0edit: invalid argument: not a regular file"
            exit 1
        elif [ ! -w "$filename" ]; then
            if readonly_filesystem "$filename"; then
                echo "run0edit: $filename is on a read-only filesystem."
                exit 1
            fi
            if ask_immutable "$filename"; then
                edit_immutable="yes"
            fi
            if [ "$edit_immutable" = "no" ]; then
                echo "run0edit: $filename is read-only."
                exit 1
            fi
        fi
        if ! cp -- "$filename" "$tmpfile"; then
            echo "run0edit: failed to copy $filename to temporary file at $tmpfile"
            exit 1
        fi
    fi

    # Attempt to edit the temp file as the original user.
    if ! run0 --user="$SUDO_UID" -- "$editor" "$tmpfile"; then
        echo "run0edit: failed to edit temporary file at $tmpfile"
        exit 1
    fi

    # If the target file exists and has been modified in the temp file, or
    # if this is a new file that is non-empty, copy temp file to target.
    if [ -f "$filename" ]; then
        if ! cmp -s -- "$tmpfile" "$filename"; then
            [ "$edit_immutable" = "yes" ] && chattr -i -- "$filename"
            set +e
            cp -- "$tmpfile" "$filename"
            cp_exit_status="$?"
            set -e
            if [ "$edit_immutable" = "yes" ]; then
                chattr +i -- "$filename"
                echo "File edited and immutable flag reapplied."
            fi
            if [ "$cp_exit_status" != 0 ]; then
                echo "run0edit: unable to write temporary file at $tmpfile to $filename"
                exit 1
            elif [ "$edit_immutable" = "yes" ] && ! cmp -s -- "$tmpfile" "$filename"; then
                echo "WARNING: contents of $filename does not match contents of edited tempfile."
                echo "File contents may be corrupted!"
                exit 1
            fi
        else
            echo "run0edit: $filename unchanged"
        fi
    else
        if [ -s "$tmpfile" ]; then
            [ "$edit_immutable" = "yes" ] && chattr -i -- "$directory"
            touch -- "$filename"
            set +e
            cp -- "$tmpfile" "$filename"
            cp_exit_status="$?"
            set -e
            if [ "$edit_immutable" = "yes" ]; then
                chattr +i -- "$directory"
                echo "File created and immutable flag reapplied to directory."
            fi
            if [ "$cp_exit_status" != 0 ]; then
                echo "run0edit: unable to write temporary file at $tmpfile to $filename"
                exit 1
            elif [ "$edit_immutable" = "yes" ] && ! cmp -s -- "$tmpfile" "$filename"; then
                echo "WARNING: contents of $filename does not match contents of tempfile."
                echo "File contents may be corrupted!"
                exit 1
            fi
        else
            echo "run0edit: $filename not created"
        fi
    fi'

# Escape backslashes and double-quotes in paths to be passed to ReadWritePaths.
if [ -e "$filename" ]; then
    writable_path="$filename"
else
    writable_path="$directory"
fi
escaped_path=$(realpath -m -- "$writable_path" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')
escaped_temp_path=$(echo "$temp_filename" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')

set +e
SYSTEMD_ADJUST_TERMINAL_TITLE=false run0 \
    --description="run0edit \"$filename\"" \
    --property="CapabilityBoundingSet=CAP_DAC_OVERRIDE CAP_FOWNER CAP_LINUX_IMMUTABLE" \
    --property="DevicePolicy=closed" \
    --property="LockPersonality=yes" \
    --property="MemoryDenyWriteExecute=yes" \
    --property="NoNewPrivileges=yes" \
    --property="PrivateDevices=yes" \
    --property="PrivateIPC=yes" \
    --property="PrivateNetwork=yes" \
    --property="ProcSubset=pid" \
    --property="ProtectClock=yes" \
    --property="ProtectControlGroups=yes" \
    --property="ProtectHome=read-only" \
    --property="ProtectHostname=yes" \
    --property="ProtectKernelLogs=yes" \
    --property="ProtectKernelModules=yes" \
    --property="ProtectKernelTunables=yes" \
    --property="ProtectProc=noaccess" \
    --property="ProtectSystem=strict" \
    --property="ReadWritePaths=\"$escaped_path\" \"$escaped_temp_path\"" \
    --property="RestrictAddressFamilies=AF_UNIX" \
    --property="RestrictNamespaces=yes" \
    --property="RestrictRealtime=yes" \
    --property="RestrictSUIDSGID=yes" \
    --property="SystemCallArchitectures=native" \
    --property="SystemCallFilter=@system-service" \
    --property="SystemCallFilter=~memfd_create @mount @privileged" \
    /bin/sh -c "$script" 'run0edit' "$filename" "$temp_filename" "$editor"
# If $directory does not exist, namespace creation will fail, causing run0 to
# silently fail with exit status 226:
# https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html
# Catch this and give a more user-friendly error:
status_code="$?"
set -e
case "$status_code" in
    0)
        rm -f -- "$temp_filename"
        ;;
    226)
        echo "run0edit: invalid argument: directory does not exist" >&2
        rm -f -- "$temp_filename"
        exit 1
        ;;
    *)
        # Clean up empty temporary file, but leave it if it's non-empty.
        if [ ! -s "$temp_filename" ]; then
            rm -f -- "$temp_filename"
        fi
        exit "$status_code"
        ;;
esac

