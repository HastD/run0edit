#!/bin/sh
# ------------------------------------------------------------------------------
# run0edit - edit a single file as root.
# version 0.3.1
#
# Please report issues at: https://github.com/HastD/run0edit/issues
#
# Copyright (C) 2025 Daniel Hast
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

set -euo pipefail

# Reset $PATH to a default value to ensure command invocations point to
# standard utilities.
PATH=$(command -p env -i sh -c 'echo "$PATH"')

if [ "$#" = 0 ] || [ "$1" = '--help' ]; then
    echo 'run0edit allows a permitted user to edit a file as root.'
    echo 'Usage: run0edit "path/to/file"'
    echo 'To use another text editor, write the path to your text editor of choice to'
    echo '    /etc/run0edit/editor.conf'
    exit
elif [ "$(id -u)" = 0 ]; then
    echo 'run0edit should not be run as root.' >&2
    exit 1
elif [ "$#" -ne 1 ]; then
    echo 'Error: too many arguments.' >&2
    echo 'run0edit allows a permitted user to edit a file as root.'
    echo 'Usage: run0edit "path/to/file"'
    exit 1
elif [ -w "$1" ]; then
    echo 'File is writable by the current user; run0edit is unnecessary.' >&2
    exit 1
fi

# Determine text editor to use.
editor=''
etc_conf_path='/etc/run0edit/editor.conf'
usr_conf_path='/usr/etc/run0edit/editor.conf'
if [ -f "$etc_conf_path" -a -r "$etc_conf_path" ]; then
    editor="$(cat "$etc_conf_path")"
elif [ -f "$usr_conf_path" -a -r "$usr_conf_path" ]; then
    editor="$(cat "$usr_conf_path")"
fi
if [ -f "$editor" -a -x "$editor" ]; then
    :
elif command -pv nano > /dev/null; then
    editor="$(command -pv nano)"
elif command -pv vi > /dev/null; then
    editor="$(command -pv vi)"
else
    echo "Editor not found. Please install either nano or vi, or write the path to" >&2
    echo "the text editor of your choice to /etc/run0edit/editor.conf" >&2
    exit 1
fi

# Create a temporary file with a random suffix appended to the filename.
filename="$1"
directory=$(dirname "$filename")
trunc_filename=$(basename "$filename" | head -c 64)
temp_filename=$(mktemp --tmpdir "${trunc_filename}.XXXXXXXXXX")

# Inner script to be run with elevated privileges:
script='\
    if [ -f "$1" ]; then
        if ! cp "$1" "$2"; then
            echo "run0edit: failed to copy $1 to temporary file at $2";
            exit 1;
        fi
    elif [ ! -e "$1" ]; then
        if [ ! -d "$(dirname "$1")" ]; then
            echo "run0edit: invalid argument: directory does not exist";
            exit 1;
        fi
    else
        echo "run0edit: invalid argument: not a regular file";
        exit 1;
    fi
    if ! run0 --user="$SUDO_UID" "$3" "$2"; then
        echo "run0edit: failed to edit temporary file at $2";
        exit 1;
    fi
    if [ -e "$1" ]; then
        if cmp -s "$2" "$1"; then
            echo "run0edit: $1 unchanged";
        else
            if ! cp "$2" "$1"; then
                echo "run0edit: unable to write temporary file at $2 to $1";
                exit 1;
            fi
        fi
    elif [ -s "$2" ]; then
        touch "$1"
        if ! cp "$2" "$1"; then
            echo "run0edit: unable to write temporary file at $2 to $1";
            exit 1;
        fi
    else
        echo "run0edit: $1 not created";
    fi'

# Escape backslashes and double-quotes in paths to be passed to ReadWritePaths.
escaped_dir=$(realpath -m "$directory" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')
escaped_temp_path=$(echo "$temp_filename" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')

set +e
run0 \
    --description="run0edit \"$filename\"" \
    --property="CapabilityBoundingSet=CAP_DAC_OVERRIDE" \
    --property="DevicePolicy=closed" \
    --property="LockPersonality=yes" \
    --property="MemoryDenyWriteExecute=yes" \
    --property="NoNewPrivileges=yes" \
    --property="PrivateDevices=yes" \
    --property="PrivateIPC=yes" \
    --property="PrivateNetwork=yes" \
    --property="ProcSubset=pid" \
    --property="ProtectClock=yes" \
    --property="ProtectControlGroups=yes" \
    --property="ProtectHome=read-only" \
    --property="ProtectHostname=yes" \
    --property="ProtectKernelLogs=yes" \
    --property="ProtectKernelModules=yes" \
    --property="ProtectKernelTunables=yes" \
    --property="ProtectProc=noaccess" \
    --property="ProtectSystem=strict" \
    --property="ReadWritePaths=\"$escaped_dir\" \"$escaped_temp_path\"" \
    --property="RestrictAddressFamilies=AF_UNIX" \
    --property="RestrictNamespaces=yes" \
    --property="RestrictRealtime=yes" \
    --property="RestrictSUIDSGID=yes" \
    --property="SystemCallArchitectures=native" \
    --property="SystemCallFilter=@system-service" \
    --property="SystemCallFilter=~memfd_create @mount @privileged" \
    /bin/sh -c "$script" 'run0edit' "$filename" "$temp_filename" "$editor"
# If $directory does not exist, namespace creation will fail, causing run0 to
# silently fail with exit status 226:
# https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html
# Catch this and give a more user-friendly error:
status_code="$?"
set -e
case "$status_code" in
    0)
        rm -f "$temp_filename"
        ;;
    226)
        echo "run0edit: invalid argument: directory does not exist" >&2
        rm -f "$temp_filename"
        exit 1
        ;;
    *)
        # Clean up empty temporary file, but leave it if it's non-empty.
        if [ ! -s "$temp_filename" ]; then
            rm -f "$temp_filename"
        fi
        exit "$status_code"
        ;;
esac

